#!/usr/bin/env python3

import os
import re
import subprocess
import argparse
import sys


def list_palettes(palettes_path: str):
    """Print the found palettes"""
    if not os.path.isdir(palettes_path):
        print(f"Directory '{palettes_path}' not found.")
        return

    palette_files = [f for f in os.listdir(
        palettes_path) if f.endswith(".yaml")]
    palette_names = [os.path.splitext(f)[0] for f in palette_files]

    if not palette_names:
        print("No palettes found.")
    else:
        print("Available palettes:")
        for name in palette_names:
            print(f"- {name}")


def parse_palette_file(palette_file: str) -> dict:
    """Parse and validate palette file, then return color dictionary"""
    colors = {}
    with open(palette_file, "r") as file:
        for line in file:
            line = line.strip()
            if not line or line.startswith("#"):
                continue
            try:
                key, value = line.split(":", 1)
                key = key.strip()
                value = value.strip().strip('"').lstrip("#")
                colors[key] = value
            except ValueError:
                continue
    errors = []
    required_keys = {f"base{'{:02X}'.format(i)}" for i in range(16)}
    for key in required_keys:
        if key not in colors:
            errors.append(f"Missing required key: {key}")
        elif not re.match(r"^[0-9a-fA-F]{6}$", colors[key]):
            errors.append(f"Invalid color value for {key}: {colors[key]}")
    if errors:
        for error in errors:
            print(error)
        exit(1)
    return colors


def print_palette(colors: dict):
    """Print color palette preview in terminal."""
    print("\nColor Palette Preview:")
    for key, value in colors.items():
        print(
            f"{key}: \033[48;2;{int(value[0:2], 16)};{
                int(value[2:4], 16)};{int(value[4:6], 16)}m  \033[0m #{value}"
        )


def parse_config_file(config_file: str) -> tuple:
    """Parse config file and return paths and commands."""
    paths, cmds = [], []
    current_section = None

    with open(config_file, "r") as file:
        for line in file.readlines():
            line = line.strip()
            if line.startswith("paths:"):
                current_section = "paths"
                continue
            elif line.startswith("cmds:"):
                current_section = "cmds"
                continue
            if current_section == "paths" and line.startswith("-"):
                paths.append(line[1:].strip())
            elif current_section == "cmds" and line.startswith("-"):
                cmds.append(line[1:].strip())
    return paths, cmds


def process_templates(colors: dict, paths: list) -> list:
    """Process template files, replacing color placeholders."""
    errors = []
    for path in paths:
        try:
            template_file = os.path.expanduser(path)
            with open(template_file, "r") as file:
                template_content = file.read()
                for key, value in colors.items():
                    template_content = template_content.replace(
                        f"{{{{{key}}}}}", str(value)
                    )

                output_file = os.path.expanduser(
                    template_file.replace("template.", ""))
                with open(output_file, "w") as file:
                    file.write(template_content)
        except FileNotFoundError:
            errors.append(f"Could not find file: '{template_file}'")
    return errors


def execute_commands(cmds: list) -> list:
    """Execute shell commands and return any errors."""
    errors = []
    for cmd in cmds:
        res = subprocess.run(cmd, shell=True)
        if res.returncode != 0:
            errors.append(str(res))
    return errors


# ##### MAIN FUNCTION #####
def main():
    # Arg parsing
    parser = argparse.ArgumentParser(
        description="pyrice, a tool to handle base16 palettes"
    )
    parser.add_argument(
        "palette_name", nargs="?", help="palette name, file name without extension"
    )
    parser.add_argument(
        "-l", "--list", action="store_true", help="List defined palettes"
    )
    parser.add_argument(
        "-p", "--preview", action="store_true", help="Preview the palette"
    )
    parser.add_argument("-r", "--rice", action="store_true",
                        help="Perform the ricing")

    args = parser.parse_args()

    palette_name = args.palette_name
    preview_flag = args.preview
    rice_flag = args.rice
    list_flag = args.list

    # Handle not enough arguments
    if not list_flag and len(sys.argv) < 3:
        parser.print_help()
        exit(1)

    # Define paths
    config_home = os.getenv("XDG_CONFIG_HOME", os.path.expanduser("~/.config"))
    pyrice_dir = os.path.join(config_home, "pyrice")
    palette_file = os.path.join(pyrice_dir, f"palettes/{palette_name}.yaml")
    config_file = os.path.join(pyrice_dir, "config.yaml")

    # Handle list_flag
    if list_flag:
        list_palettes(os.path.join(pyrice_dir, "palettes"))
        exit(0)

    # Verify file existence
    if not os.path.isfile(config_file) or not os.path.isfile(palette_file):
        print("Config or palette file not found.")
        exit(1)

    # Parse and validate colors
    colors = parse_palette_file(palette_file)

    # Preview palette if requested
    if preview_flag:
        print_palette(colors)

    # Stop here if rice_flag is not set
    if not rice_flag:
        exit(0)

    # Process config and templates
    paths, cmds = parse_config_file(config_file)
    template_errors = process_templates(colors, paths)
    command_errors = execute_commands(cmds)

    # Handle any errors
    all_errors = template_errors + command_errors
    if all_errors:
        for error in all_errors:
            print(error)
        exit(1)

    exit(0)


if __name__ == "__main__":
    main()
